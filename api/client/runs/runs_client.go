// Code generated by go-swagger; DO NOT EDIT.

package runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	lswagger "github.infra.cloudera.com/CAI/AmpRagMonitoring/pkg/swagger"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the runs client
type API interface {
	/*
	   DeleteRuns deletes an experiment run from monitoring
	   Delete an experiment run from monitoring.
	*/
	DeleteRuns(ctx context.Context, params *DeleteRunsParams) (*DeleteRunsOK, error)
	/*
	   GetRunsParameters gets a list of monitored experiment run parameters
	   Get a list of monitored experiment run parameters.
	*/
	GetRunsParameters(ctx context.Context, params *GetRunsParametersParams) (*GetRunsParametersOK, error)
	/*
	   PostRuns registers an experiment run for monitoring
	   Register an experiment run for monitoring
	*/
	PostRuns(ctx context.Context, params *PostRunsParams) (*PostRunsOK, error)
	/*
	   PostRunsList gets a list of monitored experiment runs for an experiment
	   Get a list monitored experiment runs for an experiment.
	*/
	PostRunsList(ctx context.Context, params *PostRunsListParams) (*PostRunsListOK, error)
}

// New creates a new runs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for runs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteRuns deletes an experiment run from monitoring

Delete an experiment run from monitoring.
*/
func (a *Client) DeleteRuns(ctx context.Context, params *DeleteRunsParams) (*DeleteRunsOK, error) {

	operation := &runtime.ClientOperation{
		ID:                 "DeleteRuns",
		Method:             "DELETE",
		PathPattern:        "/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRunsReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	}
	result, err := a.transport.Submit(operation)
	if err != nil {
		// Make sure to convert back to an error type so that nil comparisons work as expected
		var richError error
		richError, err = lswagger.NewRichError(operation, err)
		if err == nil {
			err = richError
		}
		return nil, err
	}
	return result.(*DeleteRunsOK), nil

}

/*
GetRunsParameters gets a list of monitored experiment run parameters

Get a list of monitored experiment run parameters.
*/
func (a *Client) GetRunsParameters(ctx context.Context, params *GetRunsParametersParams) (*GetRunsParametersOK, error) {

	operation := &runtime.ClientOperation{
		ID:                 "GetRunsParameters",
		Method:             "GET",
		PathPattern:        "/runs/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunsParametersReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	}
	result, err := a.transport.Submit(operation)
	if err != nil {
		// Make sure to convert back to an error type so that nil comparisons work as expected
		var richError error
		richError, err = lswagger.NewRichError(operation, err)
		if err == nil {
			err = richError
		}
		return nil, err
	}
	return result.(*GetRunsParametersOK), nil

}

/*
PostRuns registers an experiment run for monitoring

Register an experiment run for monitoring
*/
func (a *Client) PostRuns(ctx context.Context, params *PostRunsParams) (*PostRunsOK, error) {

	operation := &runtime.ClientOperation{
		ID:                 "PostRuns",
		Method:             "POST",
		PathPattern:        "/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRunsReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	}
	result, err := a.transport.Submit(operation)
	if err != nil {
		// Make sure to convert back to an error type so that nil comparisons work as expected
		var richError error
		richError, err = lswagger.NewRichError(operation, err)
		if err == nil {
			err = richError
		}
		return nil, err
	}
	return result.(*PostRunsOK), nil

}

/*
PostRunsList gets a list of monitored experiment runs for an experiment

Get a list monitored experiment runs for an experiment.
*/
func (a *Client) PostRunsList(ctx context.Context, params *PostRunsListParams) (*PostRunsListOK, error) {

	operation := &runtime.ClientOperation{
		ID:                 "PostRunsList",
		Method:             "POST",
		PathPattern:        "/runs/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRunsListReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	}
	result, err := a.transport.Submit(operation)
	if err != nil {
		// Make sure to convert back to an error type so that nil comparisons work as expected
		var richError error
		richError, err = lswagger.NewRichError(operation, err)
		if err == nil {
			err = richError
		}
		return nil, err
	}
	return result.(*PostRunsListOK), nil

}
