// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	lswagger "github.infra.cloudera.com/CAI/AmpRagMonitoring/pkg/swagger"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the metrics client
type API interface {
	/*
	   GetMetricsNames lists metric names for an experiment
	   List monitoring metric names for an experiment
	*/
	GetMetricsNames(ctx context.Context, params *GetMetricsNamesParams) (*GetMetricsNamesOK, error)
	/*
	   PostMetrics creates metrics
	   Create monitoring metrics
	*/
	PostMetrics(ctx context.Context, params *PostMetricsParams) (*PostMetricsOK, error)
	/*
	   PostMetricsList lists metrics
	   List monitoring metrics
	*/
	PostMetricsList(ctx context.Context, params *PostMetricsListParams) (*PostMetricsListOK, error)
}

// New creates a new metrics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for metrics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetMetricsNames lists metric names for an experiment

List monitoring metric names for an experiment
*/
func (a *Client) GetMetricsNames(ctx context.Context, params *GetMetricsNamesParams) (*GetMetricsNamesOK, error) {

	operation := &runtime.ClientOperation{
		ID:                 "GetMetricsNames",
		Method:             "GET",
		PathPattern:        "/metrics/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMetricsNamesReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	}
	result, err := a.transport.Submit(operation)
	if err != nil {
		// Make sure to convert back to an error type so that nil comparisons work as expected
		var richError error
		richError, err = lswagger.NewRichError(operation, err)
		if err == nil {
			err = richError
		}
		return nil, err
	}
	return result.(*GetMetricsNamesOK), nil

}

/*
PostMetrics creates metrics

Create monitoring metrics
*/
func (a *Client) PostMetrics(ctx context.Context, params *PostMetricsParams) (*PostMetricsOK, error) {

	operation := &runtime.ClientOperation{
		ID:                 "PostMetrics",
		Method:             "POST",
		PathPattern:        "/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostMetricsReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	}
	result, err := a.transport.Submit(operation)
	if err != nil {
		// Make sure to convert back to an error type so that nil comparisons work as expected
		var richError error
		richError, err = lswagger.NewRichError(operation, err)
		if err == nil {
			err = richError
		}
		return nil, err
	}
	return result.(*PostMetricsOK), nil

}

/*
PostMetricsList lists metrics

List monitoring metrics
*/
func (a *Client) PostMetricsList(ctx context.Context, params *PostMetricsListParams) (*PostMetricsListOK, error) {

	operation := &runtime.ClientOperation{
		ID:                 "PostMetricsList",
		Method:             "POST",
		PathPattern:        "/metrics/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostMetricsListReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	}
	result, err := a.transport.Submit(operation)
	if err != nil {
		// Make sure to convert back to an error type so that nil comparisons work as expected
		var richError error
		richError, err = lswagger.NewRichError(operation, err)
		if err == nil {
			err = richError
		}
		return nil, err
	}
	return result.(*PostMetricsListOK), nil

}
