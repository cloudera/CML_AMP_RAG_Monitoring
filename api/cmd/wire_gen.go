// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.infra.cloudera.com/CAI/AmpRagMonitoring/internal/config"
	"github.infra.cloudera.com/CAI/AmpRagMonitoring/internal/datasource"
	"github.infra.cloudera.com/CAI/AmpRagMonitoring/internal/db/sqlite"
	"github.infra.cloudera.com/CAI/AmpRagMonitoring/internal/reconcilers"
	"github.infra.cloudera.com/CAI/AmpRagMonitoring/internal/reconcilers/experiments"
	"github.infra.cloudera.com/CAI/AmpRagMonitoring/internal/reconcilers/metrics"
	"github.infra.cloudera.com/CAI/AmpRagMonitoring/internal/reconcilers/runs"
	"github.infra.cloudera.com/CAI/AmpRagMonitoring/internal/restapi"
	"github.infra.cloudera.com/CAI/AmpRagMonitoring/internal/server"
	"github.infra.cloudera.com/CAI/AmpRagMonitoring/pkg/app"
	"github.infra.cloudera.com/CAI/AmpRagMonitoring/pkg/clientbase"
	"github.infra.cloudera.com/CAI/AmpRagMonitoring/pkg/clientbase/http"
	"github.infra.cloudera.com/CAI/AmpRagMonitoring/pkg/serverbase/http/server"
	"github.infra.cloudera.com/CAI/AmpRagMonitoring/pkg/sql"
)

// Injectors from wire.go:

// wire up the dependencies.
func InitializeDependencies() (*dependencies, error) {
	instance := app.NewInstance()
	configConfig, err := config.NewConfigFromEnv()
	if err != nil {
		return nil, err
	}
	sbhttpserverConfig, err := sbhttpserver.NewConfigFromEnv()
	if err != nil {
		return nil, err
	}
	cbhttpConfig, err := cbhttp.NewConfigFromEnv()
	if err != nil {
		return nil, err
	}
	cbhttpInstance, err := cbhttp.NewInstance(cbhttpConfig)
	if err != nil {
		return nil, err
	}
	sbhttpserverInstance, err := sbhttpserver.NewInstance(sbhttpserverConfig, cbhttpInstance, instance)
	if err != nil {
		return nil, err
	}
	lsqlConfig, err := lsql.NewConfigFromEnv()
	if err != nil {
		return nil, err
	}
	lsqlInstance := sqlite.NewInstance(lsqlConfig)
	swaggerApiServer := server.NewSwaggerApiServer(instance, configConfig, lsqlInstance)
	experimentService := sqlite.NewExperiments(lsqlInstance)
	experimentRunService := sqlite.NewExperimentRuns(lsqlInstance)
	metricsService := sqlite.NewMetrics(lsqlInstance)
	database := sqlite.NewDatabase(experimentService, experimentRunService, metricsService)
	metricsAPI := restapi.NewMetricsAPI(database)
	experimentRunsAPI := restapi.NewExperimentRunsAPI(database)
	experimentAPI := restapi.NewExperimentAPI(database)
	restapiConfig, err := server.NewSwaggerConfig(metricsAPI, experimentRunsAPI, experimentAPI)
	if err != nil {
		return nil, err
	}
	handler, err := server.NewHandler(restapiConfig)
	if err != nil {
		return nil, err
	}
	v := server.NewHttpServers(restapiConfig, handler, swaggerApiServer)
	migration, err := NewMigration(configConfig, lsqlConfig)
	if err != nil {
		return nil, err
	}
	clientbaseConfig, err := clientbase.NewConfigFromEnv()
	if err != nil {
		return nil, err
	}
	connections, err := clientbase.NewConnections(clientbaseConfig, cbhttpInstance)
	if err != nil {
		return nil, err
	}
	datasourceConfig, err := datasource.NewConfigFromEnv()
	if err != nil {
		return nil, err
	}
	dataStores := datasource.NewDataStores(datasourceConfig, connections)
	experimentsConfig, err := experiments.NewConfigFromEnv()
	if err != nil {
		return nil, err
	}
	experimentReconciler := experiments.NewExperimentReconciler(experimentsConfig, database, dataStores)
	syncReconciler := experiments.NewSyncReconciler(experimentsConfig, database, dataStores)
	runsConfig, err := runs.NewConfigFromEnv()
	if err != nil {
		return nil, err
	}
	runReconciler := runs.NewRunReconciler(runsConfig, database, dataStores)
	metricsConfig, err := metrics.NewConfigFromEnv()
	if err != nil {
		return nil, err
	}
	reconciler := metrics.NewReconciler(metricsConfig, database, dataStores)
	reconcilerSet := reconcilers.NewReconcilerSet(instance, experimentsConfig, experimentReconciler, syncReconciler, runsConfig, runReconciler, metricsConfig, reconciler)
	mainDependencies := newDependencies(instance, configConfig, sbhttpserverInstance, swaggerApiServer, v, database, migration, connections, dataStores, reconcilerSet)
	return mainDependencies, nil
}
