package postgres

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __1_mutex_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\x2d\x2d\x49\xad\xb0\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\xe6\x02\x04\x00\x00\xff\xff\x23\x97\xbe\x14\x45\x00\x00\x00")

func _1_mutex_down_sql() ([]byte, error) {
	return bindata_read(
		__1_mutex_down_sql,
		"1_mutex.down.sql",
	)
}

var __1_mutex_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\x0e\xc2\x40\x0c\x44\xd1\xde\xa7\x98\x32\x5b\x52\xe7\x34\x06\x0d\x92\x85\xe3\x20\xdb\x8b\x92\xdb\x23\x50\xea\xff\xdf\x23\xa9\x4d\xb4\xde\x9d\xb0\x27\x62\x6f\xf0\xb0\xea\xc2\x36\x9b\xc7\x22\x00\x60\xb0\xe8\x7f\x8b\xe9\x8e\x77\xda\xa6\x79\xe2\xc5\x53\xc6\x2a\x16\xc5\xec\xdf\xb2\x5f\xc8\x06\x3e\xea\x93\x85\xe5\x36\x56\xf9\x06\x00\x00\xff\xff\x81\x50\x06\x66\x65\x00\x00\x00")

func _1_mutex_up_sql() ([]byte, error) {
	return bindata_read(
		__1_mutex_up_sql,
		"1_mutex.up.sql",
	)
}

var __2_experiment_runs_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xad\x28\x48\x2d\xca\xcc\x4d\xcd\x2b\x89\x2f\x2a\xcd\x2b\xb6\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\x56\xbe\x12\x30\x4e\x00\x00\x00")

func _2_experiment_runs_down_sql() ([]byte, error) {
	return bindata_read(
		__2_experiment_runs_down_sql,
		"2_experiment_runs.down.sql",
	)
}

var __2_experiment_runs_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x41\x4f\xc2\x30\x14\xc7\xef\x7c\x8a\xff\x11\x92\x91\xe0\xd9\x53\xc1\x12\x1b\xcb\xc0\xae\x33\xe2\x65\xa9\xec\x45\x1a\x67\x37\xdb\x4e\xfc\xf8\xc6\x6d\x21\x18\x0f\x12\xc3\xb5\xef\xff\x7e\xbf\xbe\x97\xb7\x50\x9c\x69\x0e\xcd\xe6\x92\x43\x2c\x91\xae\x35\xf8\xa3\xc8\x74\x06\xfa\x6c\xc8\xdb\x37\x72\xb1\xf0\xad\x0b\x18\x8f\x00\xc0\x96\xc8\xb8\x12\x4c\x62\xa3\xc4\x8a\xa9\x2d\xee\xf8\x36\xe9\x4a\x27\x0d\xb6\xc4\x03\x53\x8b\x5b\xa6\xc6\x57\xb3\xd9\xa4\xc3\xa6\xb9\x94\x7d\xd0\xb7\xee\x8f\xc4\xce\x93\x89\x54\x62\xbe\x5e\x4b\xce\xd2\x63\x15\x37\x7c\xc9\x72\xa9\xb1\x34\x55\xa0\x04\xd3\x29\x82\xf9\x20\xc4\xbd\x0d\x08\x35\xe2\xde\x44\x1c\x08\x3b\xe3\xf0\xea\xea\x43\xff\x60\x06\x1e\x6c\x80\xa7\xf7\x96\xc2\x37\xfb\xb9\x8d\x08\xd1\x56\x15\xac\x43\xe3\xeb\x17\x4f\x21\x74\xf6\xb6\x29\x2f\x69\x77\x03\xf0\x5c\x7d\x49\x15\x5d\x72\xf8\x9e\x77\xae\x7d\x58\x7d\x11\x03\xb4\x58\xf1\x4c\xb3\xd5\x46\x3f\xfd\xfe\xc4\x22\x57\x8a\xa7\xba\x38\x86\x92\xd3\xdd\xfd\xb7\x3d\x4f\xc5\x7d\xce\xc7\x3f\x4e\x29\x19\x0e\x66\x32\x9a\x5c\x8f\xbe\x02\x00\x00\xff\xff\x4d\x8e\x7e\xd4\xb1\x02\x00\x00")

func _2_experiment_runs_up_sql() ([]byte, error) {
	return bindata_read(
		__2_experiment_runs_up_sql,
		"2_experiment_runs.up.sql",
	)
}

var __3_metrics_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\x11\x66\xfd\xd0\x46\x00\x00\x00")

func _3_metrics_down_sql() ([]byte, error) {
	return bindata_read(
		__3_metrics_down_sql,
		"3_metrics.down.sql",
	)
}

var __3_metrics_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcc\xbd\x6a\x84\x40\x14\xc5\xf1\xde\xa7\x38\xa5\x42\x0a\x53\xa7\xba\x31\x57\x32\x64\x34\x72\xe7\x1a\x34\x8d\x48\x1c\xc2\x40\x94\xe0\x47\xc8\xe3\x2f\xb8\x8b\xc5\x16\xbb\xe5\xe1\xff\xe3\x64\xc2\xa4\x0c\xa5\x67\xcb\x30\x39\xca\x77\x05\x37\xc6\xa9\xc3\xe8\xd7\x39\x7c\x2d\x88\x23\x00\x08\x03\x1c\x8b\x21\x8b\x4a\x4c\x41\xd2\xe2\x8d\xdb\x87\x3d\xf9\xff\x5f\x3f\x87\xd1\x4f\x6b\x17\x06\x7c\x90\x64\xaf\x24\xf1\x63\x9a\x26\xfb\x5d\x59\x5b\x7b\x86\xf3\x36\xdd\x11\x53\x3f\xfa\x5b\xfd\xaf\xff\xd9\x3c\x84\xc9\x5e\x85\xb5\xff\x5e\xa0\xdc\xe8\x65\x2e\x50\x53\xb0\x53\x2a\x2a\xfd\x3c\x2c\x5e\x38\xa7\xda\x2a\xb2\x5a\x84\x4b\xed\x0e\x14\x25\x4f\xd1\x29\x00\x00\xff\xff\x39\xbf\x7f\xdb\x0c\x01\x00\x00")

func _3_metrics_up_sql() ([]byte, error) {
	return bindata_read(
		__3_metrics_up_sql,
		"3_metrics.up.sql",
	)
}

var __4_metrics_value_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\xa4\x10\xe3\xef\x27\x00\x00\x00")

func _4_metrics_value_down_sql() ([]byte, error) {
	return bindata_read(
		__4_metrics_value_down_sql,
		"4_metrics_value.down.sql",
	)
}

var __4_metrics_value_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\x56\x08\x72\xf5\x73\xf4\x75\x55\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x4b\xcc\x29\x4d\x55\x08\xf1\x87\x30\xe2\xf3\x4a\x73\x53\x8b\x32\x93\xad\xb9\xb0\xe9\x74\x74\x71\x41\xd1\x16\x5f\x92\x5a\x51\xa2\x10\xe2\x1a\x11\x62\xcd\x05\x08\x00\x00\xff\xff\xca\x35\xb4\x6d\x6a\x00\x00\x00")

func _4_metrics_value_up_sql() ([]byte, error) {
	return bindata_read(
		__4_metrics_value_up_sql,
		"4_metrics_value.up.sql",
	)
}

var __5_metrics_value_numeric_nullable_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\xa4\x10\xe3\xef\x27\x00\x00\x00")

func _5_metrics_value_numeric_nullable_down_sql() ([]byte, error) {
	return bindata_read(
		__5_metrics_value_numeric_nullable_down_sql,
		"5_metrics_value_numeric_nullable.down.sql",
	)
}

var __5_metrics_value_numeric_nullable_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\x56\x08\x72\xf5\x73\xf4\x75\x55\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x4b\xcc\x29\x4d\x8d\xcf\x2b\xcd\x4d\x2d\xca\x4c\x56\x08\xf1\x47\x15\x88\xcf\xcb\xcf\x8b\xcf\x2b\xcd\xc9\x49\x4c\xca\x49\xb5\xe6\xc2\x66\x9c\xa3\x8b\x0b\x76\xb3\x82\x5c\x1d\x7d\xac\xb9\x42\x03\x5c\x1c\x43\x10\xaa\x83\x5d\x43\xd0\x94\xd9\x92\x6c\xa3\x4b\x90\x7f\x00\x56\x2b\xd1\xf4\x02\x02\x00\x00\xff\xff\xf0\x33\x31\x06\xfd\x00\x00\x00")

func _5_metrics_value_numeric_nullable_up_sql() ([]byte, error) {
	return bindata_read(
		__5_metrics_value_numeric_nullable_up_sql,
		"5_metrics_value_numeric_nullable.up.sql",
	)
}

var __6_experiments_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xad\x28\x48\x2d\xca\xcc\x4d\xcd\x2b\x29\xb6\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\x18\x12\x5b\x6b\x4a\x00\x00\x00")

func _6_experiments_down_sql() ([]byte, error) {
	return bindata_read(
		__6_experiments_down_sql,
		"6_experiments.down.sql",
	)
}

var __6_experiments_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x41\x4b\xf3\x30\x1c\x87\xef\xfb\x14\xbf\xe3\x06\x1b\xec\x3d\xbf\xa7\x6c\xa6\x18\x4c\xdb\x99\xa6\xe2\xbc\x94\xb8\xfe\x71\xc1\xae\xad\x49\xea\xfc\xf8\x62\x5b\xa6\x22\xc2\x90\x5d\x93\x27\xcf\x93\xfc\xc9\x5a\x71\xa6\x39\x34\x5b\x49\x0e\x11\x21\x49\x35\xf8\xbd\xc8\x74\x06\x7a\x6b\xc9\xd9\x03\xd5\xc1\x63\x3a\x01\x00\x5b\x22\xe3\x4a\x30\x89\x8d\x12\x31\x53\x5b\xdc\xf0\xed\xbc\xdf\xfa\x84\x0b\x5b\xe2\x8e\xa9\xf5\x35\x53\xd3\x7f\xcb\xe5\xac\x57\x26\xb9\x94\x03\xe8\xe8\xd0\x04\x2a\x7e\xe7\x07\x6c\xe7\xc8\x04\x2a\xb1\x4a\x53\xc9\x59\x72\x92\xe0\x8a\x47\x2c\x97\x1a\x91\xa9\x3c\xcd\xb1\x58\xc0\x9b\x57\x42\xd8\x5b\x0f\xdf\x20\xec\x4d\xc0\x91\xb0\x33\x35\x9e\xeb\xe6\x38\x2c\x98\xd1\x07\xeb\xe1\xe8\xa5\x23\xff\xe1\x7e\xec\x02\x7c\xb0\x55\x05\x5b\xa3\x75\xcd\x93\x23\xef\xfb\x7a\xd7\x96\x97\xac\xd7\xa3\xf0\xdc\x7c\x49\x15\x5d\xf2\xf1\x83\xef\xdc\xfa\x38\xfa\x22\x78\x68\x11\xf3\x4c\xb3\x78\xa3\x1f\x7e\x5e\x62\x9d\x2b\xc5\x13\x5d\x9c\xa0\xf9\xd7\xd9\xfd\xf5\x78\x9e\x88\xdb\x9c\x4f\xbf\xfd\x8f\xd9\x64\xf6\x7f\xf2\x1e\x00\x00\xff\xff\xe6\x98\xbd\xa4\xaa\x02\x00\x00")

func _6_experiments_up_sql() ([]byte, error) {
	return bindata_read(
		__6_experiments_up_sql,
		"6_experiments.up.sql",
	)
}

var __7_experiment_runs_remote_run_id_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xad\x28\x48\x2d\xca\xcc\x4d\xcd\x2b\x89\x2f\x2a\xcd\x2b\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x4a\xcd\xcd\x2f\x49\x05\x89\xc7\x67\xa6\x58\x03\x02\x00\x00\xff\xff\x98\x7e\x9e\x18\x36\x00\x00\x00")

func _7_experiment_runs_remote_run_id_down_sql() ([]byte, error) {
	return bindata_read(
		__7_experiment_runs_remote_run_id_down_sql,
		"7_experiment_runs_remote_run_id.down.sql",
	)
}

var __7_experiment_runs_remote_run_id_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xad\x28\x48\x2d\xca\xcc\x4d\xcd\x2b\x89\x2f\x2a\xcd\x2b\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x4a\xcd\xcd\x2f\x49\x05\x09\xc7\x67\xa6\x28\x84\x39\x06\x39\x7b\x38\x06\x69\x18\x1a\x18\x68\x2a\xb8\xb8\xba\x39\x86\xfa\x84\x28\xf8\x85\xfa\xf8\x58\x03\x02\x00\x00\xff\xff\xeb\xe5\x55\x0d\x4f\x00\x00\x00")

func _7_experiment_runs_remote_run_id_up_sql() ([]byte, error) {
	return bindata_read(
		__7_experiment_runs_remote_run_id_up_sql,
		"7_experiment_runs_remote_run_id.up.sql",
	)
}

var __8_experiment_runs_reconcile_metrics_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xad\x28\x48\x2d\xca\xcc\x4d\xcd\x2b\x89\x2f\x2a\xcd\x2b\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x4a\x4d\xce\xcf\x4b\xce\xcc\x49\x8d\xcf\x4d\x2d\x29\xca\x4c\x2e\xb6\x06\x04\x00\x00\xff\xff\x28\x82\x38\x39\x3a\x00\x00\x00")

func _8_experiment_runs_reconcile_metrics_down_sql() ([]byte, error) {
	return bindata_read(
		__8_experiment_runs_reconcile_metrics_down_sql,
		"8_experiment_runs_reconcile_metrics.down.sql",
	)
}

var __8_experiment_runs_reconcile_metrics_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0a\xc2\x30\x0c\x06\xe0\x57\xf9\xdf\xc3\x53\x66\xb3\x53\x4c\x40\xd2\xf3\x90\x92\x43\x61\xab\x92\x56\xf0\xf1\xfd\x48\x9c\x9f\x70\xda\x84\x11\xbf\x4f\x64\xbf\x62\xac\x23\xbf\x63\x82\x4a\xc1\xdd\xa4\x3e\x14\x19\xed\x3d\x5a\x3f\xe3\xb8\x62\x65\x6f\x13\x9b\x99\x30\x29\xd4\x1c\x5a\x45\x50\x78\xa7\x2a\x8e\xfd\x75\xce\xb8\xfd\x03\x00\x00\xff\xff\x10\xeb\xc5\xba\x58\x00\x00\x00")

func _8_experiment_runs_reconcile_metrics_up_sql() ([]byte, error) {
	return bindata_read(
		__8_experiment_runs_reconcile_metrics_up_sql,
		"8_experiment_runs_reconcile_metrics.up.sql",
	)
}

var __9_experiments_name_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xad\x28\x48\x2d\xca\xcc\x4d\xcd\x2b\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x4b\xcc\x4d\xb5\x06\x04\x00\x00\xff\xff\x51\xb8\x51\x26\x29\x00\x00\x00")

func _9_experiments_name_down_sql() ([]byte, error) {
	return bindata_read(
		__9_experiments_name_down_sql,
		"9_experiments_name.down.sql",
	)
}

var __9_experiments_name_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xad\x28\x48\x2d\xca\xcc\x4d\xcd\x2b\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x4b\xcc\x4d\x55\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x34\x30\xd0\xb4\x06\x04\x00\x00\xff\xff\xfb\xc8\x3c\xf3\x35\x00\x00\x00")

func _9_experiments_name_up_sql() ([]byte, error) {
	return bindata_read(
		__9_experiments_name_up_sql,
		"9_experiments_name.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"1_mutex.down.sql":                             _1_mutex_down_sql,
	"1_mutex.up.sql":                               _1_mutex_up_sql,
	"2_experiment_runs.down.sql":                   _2_experiment_runs_down_sql,
	"2_experiment_runs.up.sql":                     _2_experiment_runs_up_sql,
	"3_metrics.down.sql":                           _3_metrics_down_sql,
	"3_metrics.up.sql":                             _3_metrics_up_sql,
	"4_metrics_value.down.sql":                     _4_metrics_value_down_sql,
	"4_metrics_value.up.sql":                       _4_metrics_value_up_sql,
	"5_metrics_value_numeric_nullable.down.sql":    _5_metrics_value_numeric_nullable_down_sql,
	"5_metrics_value_numeric_nullable.up.sql":      _5_metrics_value_numeric_nullable_up_sql,
	"6_experiments.down.sql":                       _6_experiments_down_sql,
	"6_experiments.up.sql":                         _6_experiments_up_sql,
	"7_experiment_runs_remote_run_id.down.sql":     _7_experiment_runs_remote_run_id_down_sql,
	"7_experiment_runs_remote_run_id.up.sql":       _7_experiment_runs_remote_run_id_up_sql,
	"8_experiment_runs_reconcile_metrics.down.sql": _8_experiment_runs_reconcile_metrics_down_sql,
	"8_experiment_runs_reconcile_metrics.up.sql":   _8_experiment_runs_reconcile_metrics_up_sql,
	"9_experiments_name.down.sql":                  _9_experiments_name_down_sql,
	"9_experiments_name.up.sql":                    _9_experiments_name_up_sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"1_mutex.down.sql":                             &_bintree_t{_1_mutex_down_sql, map[string]*_bintree_t{}},
	"1_mutex.up.sql":                               &_bintree_t{_1_mutex_up_sql, map[string]*_bintree_t{}},
	"2_experiment_runs.down.sql":                   &_bintree_t{_2_experiment_runs_down_sql, map[string]*_bintree_t{}},
	"2_experiment_runs.up.sql":                     &_bintree_t{_2_experiment_runs_up_sql, map[string]*_bintree_t{}},
	"3_metrics.down.sql":                           &_bintree_t{_3_metrics_down_sql, map[string]*_bintree_t{}},
	"3_metrics.up.sql":                             &_bintree_t{_3_metrics_up_sql, map[string]*_bintree_t{}},
	"4_metrics_value.down.sql":                     &_bintree_t{_4_metrics_value_down_sql, map[string]*_bintree_t{}},
	"4_metrics_value.up.sql":                       &_bintree_t{_4_metrics_value_up_sql, map[string]*_bintree_t{}},
	"5_metrics_value_numeric_nullable.down.sql":    &_bintree_t{_5_metrics_value_numeric_nullable_down_sql, map[string]*_bintree_t{}},
	"5_metrics_value_numeric_nullable.up.sql":      &_bintree_t{_5_metrics_value_numeric_nullable_up_sql, map[string]*_bintree_t{}},
	"6_experiments.down.sql":                       &_bintree_t{_6_experiments_down_sql, map[string]*_bintree_t{}},
	"6_experiments.up.sql":                         &_bintree_t{_6_experiments_up_sql, map[string]*_bintree_t{}},
	"7_experiment_runs_remote_run_id.down.sql":     &_bintree_t{_7_experiment_runs_remote_run_id_down_sql, map[string]*_bintree_t{}},
	"7_experiment_runs_remote_run_id.up.sql":       &_bintree_t{_7_experiment_runs_remote_run_id_up_sql, map[string]*_bintree_t{}},
	"8_experiment_runs_reconcile_metrics.down.sql": &_bintree_t{_8_experiment_runs_reconcile_metrics_down_sql, map[string]*_bintree_t{}},
	"8_experiment_runs_reconcile_metrics.up.sql":   &_bintree_t{_8_experiment_runs_reconcile_metrics_up_sql, map[string]*_bintree_t{}},
	"9_experiments_name.down.sql":                  &_bintree_t{_9_experiments_name_down_sql, map[string]*_bintree_t{}},
	"9_experiments_name.up.sql":                    &_bintree_t{_9_experiments_name_up_sql, map[string]*_bintree_t{}},
}}
