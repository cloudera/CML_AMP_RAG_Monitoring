package postgres

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __1_mutex_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\x2d\x2d\x49\xad\xb0\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\xe6\x02\x04\x00\x00\xff\xff\x23\x97\xbe\x14\x45\x00\x00\x00")

func _1_mutex_down_sql() ([]byte, error) {
	return bindata_read(
		__1_mutex_down_sql,
		"1_mutex.down.sql",
	)
}

var __1_mutex_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\x0e\xc2\x40\x0c\x44\xd1\xde\xa7\x98\x32\x5b\x52\xe7\x34\x06\x0d\x92\x85\xe3\x20\xdb\x8b\x92\xdb\x23\x50\xea\xff\xdf\x23\xa9\x4d\xb4\xde\x9d\xb0\x27\x62\x6f\xf0\xb0\xea\xc2\x36\x9b\xc7\x22\x00\x60\xb0\xe8\x7f\x8b\xe9\x8e\x77\xda\xa6\x79\xe2\xc5\x53\xc6\x2a\x16\xc5\xec\xdf\xb2\x5f\xc8\x06\x3e\xea\x93\x85\xe5\x36\x56\xf9\x06\x00\x00\xff\xff\x81\x50\x06\x66\x65\x00\x00\x00")

func _1_mutex_up_sql() ([]byte, error) {
	return bindata_read(
		__1_mutex_up_sql,
		"1_mutex.up.sql",
	)
}

var __2_experiment_runs_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xad\x28\x48\x2d\xca\xcc\x4d\xcd\x2b\x89\x2f\x2a\xcd\x2b\xb6\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\x56\xbe\x12\x30\x4e\x00\x00\x00")

func _2_experiment_runs_down_sql() ([]byte, error) {
	return bindata_read(
		__2_experiment_runs_down_sql,
		"2_experiment_runs.down.sql",
	)
}

var __2_experiment_runs_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x41\x4f\x32\x31\x10\x86\xef\xfc\x8a\xf7\x08\xc9\x92\xf0\x9d\xbf\x53\xc1\x41\x1b\x97\x82\xa5\x6b\xc4\x0b\xa9\xec\x44\x1a\xd7\x82\x6d\x57\xfc\xf9\xc6\xdd\x0d\xc1\x78\x90\x18\xae\x9d\x77\x9e\xa7\x33\x99\x89\x26\x61\x08\x46\x8c\x73\x82\x9c\x42\xcd\x0d\xe8\x41\x2e\xcd\x12\xfc\xb1\xe7\xe0\x5e\xd9\xa7\x75\xa8\x7d\x44\xbf\x07\x00\xae\x84\x54\x86\xae\x49\x63\xa1\xe5\x4c\xe8\x15\x6e\x69\x95\x35\xb5\x93\x0e\x57\xe2\x5e\xe8\xc9\x8d\xd0\xfd\x7f\xa3\xd1\xa0\xe1\xaa\x22\xcf\xdb\x60\xa8\xfd\x2f\x89\x4d\x60\x9b\xb8\xc4\x78\x3e\xcf\x49\xa8\x63\x15\x57\x34\x15\x45\x6e\x30\xb5\x55\xe4\x0c\xc3\x21\xa2\x7d\x67\xa4\xad\x8b\x88\x3b\xa4\xad\x4d\x38\x30\x36\xd6\xe3\xc5\xef\x0e\xed\x83\xed\x78\x70\x11\x81\xdf\x6a\x8e\x5f\xec\xa7\x3a\x21\x26\x57\x55\x70\x1e\xfb\xb0\x7b\x0e\x1c\x63\x63\xaf\xf7\xe5\x25\xed\xbe\x03\x9e\xab\x2f\xb9\xe2\x4b\x0e\xdf\xf2\xce\xb5\x77\xab\x5f\xa7\x08\x23\x67\xb4\x34\x62\xb6\x30\x8f\x3f\x3f\x31\x29\xb4\x26\x65\xd6\xc7\x50\x76\xba\xbb\xbf\xb6\x17\x4a\xde\x15\xd4\xff\x76\x4a\x59\x77\x30\x83\xde\xe0\x7f\xef\x33\x00\x00\xff\xff\x0d\x5e\x11\x96\xb2\x02\x00\x00")

func _2_experiment_runs_up_sql() ([]byte, error) {
	return bindata_read(
		__2_experiment_runs_up_sql,
		"2_experiment_runs.up.sql",
	)
}

var __3_metrics_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\x4d\x2d\x29\xca\x4c\x2e\xb6\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\x11\x66\xfd\xd0\x46\x00\x00\x00")

func _3_metrics_down_sql() ([]byte, error) {
	return bindata_read(
		__3_metrics_down_sql,
		"3_metrics.down.sql",
	)
}

var __3_metrics_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcc\xbd\x6a\x84\x40\x14\xc5\xf1\xde\xa7\x38\xa5\x42\x0a\x53\xa7\xba\x31\xd7\x64\xc8\x38\x91\xeb\x35\x68\x1a\x91\x38\x84\x81\x28\xc1\x8f\x90\xc7\x0f\xb8\x8b\xc5\x16\xbb\xe5\xe1\xff\xe3\x64\xc2\xa4\x0c\xa5\x47\xcb\x30\x39\xdc\x9b\x82\x1b\x53\x69\x85\xd1\xaf\x73\xf8\x5c\x10\x47\x00\x10\x06\x18\xa7\xfc\xcc\x82\x52\x4c\x41\xd2\xe2\x95\xdb\xbb\xbd\xf9\xbf\x1f\x3f\x87\xd1\x4f\x6b\x17\x06\xbc\x93\x64\x2f\x24\xf1\x7d\x9a\x26\xfb\x9f\xab\xad\x3d\xc1\x79\x9b\x6e\x88\xa9\x1f\xfd\xb5\xfe\xdb\x7f\x6f\x1e\xc2\x64\x2f\xc2\xda\x7f\x2d\x50\x6e\xf4\x3c\x17\xa8\x29\xb8\x52\x2a\x4a\xfd\x38\x2c\x9e\x38\xa7\xda\x2a\xb2\x5a\x84\x9d\x76\x07\x8a\x92\x87\xe8\x3f\x00\x00\xff\xff\xaf\x74\x8b\xc8\x0d\x01\x00\x00")

func _3_metrics_up_sql() ([]byte, error) {
	return bindata_read(
		__3_metrics_up_sql,
		"3_metrics.up.sql",
	)
}

var __4_metrics_value_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\xa4\x10\xe3\xef\x27\x00\x00\x00")

func _4_metrics_value_down_sql() ([]byte, error) {
	return bindata_read(
		__4_metrics_value_down_sql,
		"4_metrics_value.down.sql",
	)
}

var __4_metrics_value_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\x56\x08\x72\xf5\x73\xf4\x75\x55\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x4b\xcc\x29\x4d\x55\x08\xf1\x87\x30\xe2\xf3\x4a\x73\x53\x8b\x32\x93\xad\xb9\xb0\xe9\x74\x74\x71\x41\xd1\x16\x5f\x92\x5a\x51\xa2\x10\xe2\x1a\x11\x62\xcd\x05\x08\x00\x00\xff\xff\xca\x35\xb4\x6d\x6a\x00\x00\x00")

func _4_metrics_value_up_sql() ([]byte, error) {
	return bindata_read(
		__4_metrics_value_up_sql,
		"4_metrics_value.up.sql",
	)
}

var __5_metrics_value_numeric_nullable_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\xa4\x10\xe3\xef\x27\x00\x00\x00")

func _5_metrics_value_numeric_nullable_down_sql() ([]byte, error) {
	return bindata_read(
		__5_metrics_value_numeric_nullable_down_sql,
		"5_metrics_value_numeric_nullable.down.sql",
	)
}

var __5_metrics_value_numeric_nullable_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2d\x29\xca\x4c\x2e\x56\x08\x72\xf5\x73\xf4\x75\x55\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x4b\xcc\x29\x4d\x8d\xcf\x2b\xcd\x4d\x2d\xca\x4c\x56\x08\xf1\x47\x15\x88\xcf\xcb\xcf\x8b\xcf\x2b\xcd\xc9\x49\x4c\xca\x49\xb5\xe6\xc2\x66\x9c\xa3\x8b\x0b\x76\xb3\x82\x5c\x1d\x7d\xac\xb9\x42\x03\x5c\x1c\x43\x10\xaa\x83\x5d\x43\xd0\x94\xd9\x92\x6c\xa3\x4b\x90\x7f\x00\x56\x2b\xd1\xf4\x02\x02\x00\x00\xff\xff\xf0\x33\x31\x06\xfd\x00\x00\x00")

func _5_metrics_value_numeric_nullable_up_sql() ([]byte, error) {
	return bindata_read(
		__5_metrics_value_numeric_nullable_up_sql,
		"5_metrics_value_numeric_nullable.up.sql",
	)
}

var __6_experiments_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\x53\xd0\xd7\x52\xb4\x34\x30\x30\x30\x50\x08\x70\x0d\x0e\xf6\xf4\xf5\x0c\x0e\xf1\x74\x56\xd0\xd2\xb7\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xad\x28\x48\x2d\xca\xcc\x4d\xcd\x2b\x29\xb6\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\x18\x12\x5b\x6b\x4a\x00\x00\x00")

func _6_experiments_down_sql() ([]byte, error) {
	return bindata_read(
		__6_experiments_down_sql,
		"6_experiments.down.sql",
	)
}

var __6_experiments_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xc1\x4f\xc2\x30\x14\x87\xef\xfc\x15\xbf\x23\x24\x90\xe0\xd9\x53\xc1\x87\x36\x8e\x82\xa5\x33\xe2\x65\xa9\xec\x45\x1a\xc7\x86\x6d\x27\xfe\xf9\xc6\x6d\x41\x8d\x31\x21\x86\x6b\xfb\xf5\xfb\xda\x97\x4e\x35\x09\x43\x30\x62\x92\x10\xe4\x0c\x6a\x61\x40\x0f\x72\x65\x56\xe0\xf7\x3d\x7b\xb7\xe3\x32\x06\xf4\x7b\x00\xe0\x72\x48\x65\xe8\x9a\x34\x96\x5a\xce\x85\x5e\xe3\x96\xd6\xc3\x66\xef\x8b\xce\x5c\x8e\x7b\xa1\xa7\x37\x42\xf7\x2f\xc6\xe3\x41\xe3\x54\x69\x92\xb4\xa0\xe7\x5d\x15\x39\xfb\x9b\x6f\xb1\x8d\x67\x1b\x39\xc7\x64\xb1\x48\x48\xa8\xa3\x04\x57\x34\x13\x69\x62\x30\xb3\x45\xe0\x21\x46\x23\x04\xfb\xc6\x88\x5b\x17\x10\x2a\xc4\xad\x8d\x38\x30\x36\xb6\xc4\x4b\x59\x1d\xda\x05\xdb\xf9\xe0\x02\x3c\xbf\xd6\x1c\x3e\xdd\x4f\x75\x44\x88\xae\x28\xe0\x4a\xec\x7d\xf5\xec\x39\x84\xa6\x5e\xef\xf3\x73\xd6\xcb\x4e\x78\x6a\x3e\xe7\x82\xcf\xf9\xf8\xd6\x77\x6a\xbd\x1b\x7d\x16\x03\x8c\x9c\xd3\xca\x88\xf9\xd2\x3c\xfe\xbe\xc4\x34\xd5\x9a\x94\xc9\x8e\xd0\xf0\xfb\xec\xfe\x7b\x3c\x55\xf2\x2e\xa5\xfe\x8f\xff\x31\xe8\x0d\x2e\x7b\x1f\x01\x00\x00\xff\xff\x82\xaa\x86\x76\xab\x02\x00\x00")

func _6_experiments_up_sql() ([]byte, error) {
	return bindata_read(
		__6_experiments_up_sql,
		"6_experiments.up.sql",
	)
}

var __7_experiment_runs_remote_run_id_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xad\x28\x48\x2d\xca\xcc\x4d\xcd\x2b\x89\x2f\x2a\xcd\x2b\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x4a\xcd\xcd\x2f\x49\x05\x89\xc7\x67\xa6\x58\x03\x02\x00\x00\xff\xff\x98\x7e\x9e\x18\x36\x00\x00\x00")

func _7_experiment_runs_remote_run_id_down_sql() ([]byte, error) {
	return bindata_read(
		__7_experiment_runs_remote_run_id_down_sql,
		"7_experiment_runs_remote_run_id.down.sql",
	)
}

var __7_experiment_runs_remote_run_id_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xad\x28\x48\x2d\xca\xcc\x4d\xcd\x2b\x89\x2f\x2a\xcd\x2b\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x4a\xcd\xcd\x2f\x49\x05\x09\xc7\x67\xa6\x28\x84\x39\x06\x39\x7b\x38\x06\x69\x18\x1a\x18\x68\x2a\xb8\xb8\xba\x39\x86\xfa\x84\x28\xf8\x85\xfa\xf8\x58\x03\x02\x00\x00\xff\xff\xeb\xe5\x55\x0d\x4f\x00\x00\x00")

func _7_experiment_runs_remote_run_id_up_sql() ([]byte, error) {
	return bindata_read(
		__7_experiment_runs_remote_run_id_up_sql,
		"7_experiment_runs_remote_run_id.up.sql",
	)
}

var __8_experiment_runs_reconcile_metrics_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xad\x28\x48\x2d\xca\xcc\x4d\xcd\x2b\x89\x2f\x2a\xcd\x2b\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x4a\x4d\xce\xcf\x4b\xce\xcc\x49\x8d\xcf\x4d\x2d\x29\xca\x4c\x2e\xb6\x06\x04\x00\x00\xff\xff\x28\x82\x38\x39\x3a\x00\x00\x00")

func _8_experiment_runs_reconcile_metrics_down_sql() ([]byte, error) {
	return bindata_read(
		__8_experiment_runs_reconcile_metrics_down_sql,
		"8_experiment_runs_reconcile_metrics.down.sql",
	)
}

var __8_experiment_runs_reconcile_metrics_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0a\xc2\x30\x0c\x06\xe0\x57\xf9\xdf\xc3\x53\x66\xb3\x53\x4c\x40\xd2\xf3\x90\x92\x43\x61\xab\x92\x56\xf0\xf1\xfd\x48\x9c\x9f\x70\xda\x84\x11\xbf\x4f\x64\xbf\x62\xac\x23\xbf\x63\x82\x4a\xc1\xdd\xa4\x3e\x14\x19\xed\x3d\x5a\x3f\xe3\xb8\x62\x65\x6f\x13\x9b\x99\x30\x29\xd4\x1c\x5a\x45\x50\x78\xa7\x2a\x8e\xfd\x75\xce\xb8\xfd\x03\x00\x00\xff\xff\x10\xeb\xc5\xba\x58\x00\x00\x00")

func _8_experiment_runs_reconcile_metrics_up_sql() ([]byte, error) {
	return bindata_read(
		__8_experiment_runs_reconcile_metrics_up_sql,
		"8_experiment_runs_reconcile_metrics.up.sql",
	)
}

var __9_experiments_name_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xad\x28\x48\x2d\xca\xcc\x4d\xcd\x2b\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x4b\xcc\x4d\xb5\x06\x04\x00\x00\xff\xff\x51\xb8\x51\x26\x29\x00\x00\x00")

func _9_experiments_name_down_sql() ([]byte, error) {
	return bindata_read(
		__9_experiments_name_down_sql,
		"9_experiments_name.down.sql",
	)
}

var __9_experiments_name_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xad\x28\x48\x2d\xca\xcc\x4d\xcd\x2b\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x4b\xcc\x4d\x55\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x34\x30\xd0\xb4\x06\x04\x00\x00\xff\xff\xfb\xc8\x3c\xf3\x35\x00\x00\x00")

func _9_experiments_name_up_sql() ([]byte, error) {
	return bindata_read(
		__9_experiments_name_up_sql,
		"9_experiments_name.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"1_mutex.down.sql":                             _1_mutex_down_sql,
	"1_mutex.up.sql":                               _1_mutex_up_sql,
	"2_experiment_runs.down.sql":                   _2_experiment_runs_down_sql,
	"2_experiment_runs.up.sql":                     _2_experiment_runs_up_sql,
	"3_metrics.down.sql":                           _3_metrics_down_sql,
	"3_metrics.up.sql":                             _3_metrics_up_sql,
	"4_metrics_value.down.sql":                     _4_metrics_value_down_sql,
	"4_metrics_value.up.sql":                       _4_metrics_value_up_sql,
	"5_metrics_value_numeric_nullable.down.sql":    _5_metrics_value_numeric_nullable_down_sql,
	"5_metrics_value_numeric_nullable.up.sql":      _5_metrics_value_numeric_nullable_up_sql,
	"6_experiments.down.sql":                       _6_experiments_down_sql,
	"6_experiments.up.sql":                         _6_experiments_up_sql,
	"7_experiment_runs_remote_run_id.down.sql":     _7_experiment_runs_remote_run_id_down_sql,
	"7_experiment_runs_remote_run_id.up.sql":       _7_experiment_runs_remote_run_id_up_sql,
	"8_experiment_runs_reconcile_metrics.down.sql": _8_experiment_runs_reconcile_metrics_down_sql,
	"8_experiment_runs_reconcile_metrics.up.sql":   _8_experiment_runs_reconcile_metrics_up_sql,
	"9_experiments_name.down.sql":                  _9_experiments_name_down_sql,
	"9_experiments_name.up.sql":                    _9_experiments_name_up_sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"1_mutex.down.sql":                             &_bintree_t{_1_mutex_down_sql, map[string]*_bintree_t{}},
	"1_mutex.up.sql":                               &_bintree_t{_1_mutex_up_sql, map[string]*_bintree_t{}},
	"2_experiment_runs.down.sql":                   &_bintree_t{_2_experiment_runs_down_sql, map[string]*_bintree_t{}},
	"2_experiment_runs.up.sql":                     &_bintree_t{_2_experiment_runs_up_sql, map[string]*_bintree_t{}},
	"3_metrics.down.sql":                           &_bintree_t{_3_metrics_down_sql, map[string]*_bintree_t{}},
	"3_metrics.up.sql":                             &_bintree_t{_3_metrics_up_sql, map[string]*_bintree_t{}},
	"4_metrics_value.down.sql":                     &_bintree_t{_4_metrics_value_down_sql, map[string]*_bintree_t{}},
	"4_metrics_value.up.sql":                       &_bintree_t{_4_metrics_value_up_sql, map[string]*_bintree_t{}},
	"5_metrics_value_numeric_nullable.down.sql":    &_bintree_t{_5_metrics_value_numeric_nullable_down_sql, map[string]*_bintree_t{}},
	"5_metrics_value_numeric_nullable.up.sql":      &_bintree_t{_5_metrics_value_numeric_nullable_up_sql, map[string]*_bintree_t{}},
	"6_experiments.down.sql":                       &_bintree_t{_6_experiments_down_sql, map[string]*_bintree_t{}},
	"6_experiments.up.sql":                         &_bintree_t{_6_experiments_up_sql, map[string]*_bintree_t{}},
	"7_experiment_runs_remote_run_id.down.sql":     &_bintree_t{_7_experiment_runs_remote_run_id_down_sql, map[string]*_bintree_t{}},
	"7_experiment_runs_remote_run_id.up.sql":       &_bintree_t{_7_experiment_runs_remote_run_id_up_sql, map[string]*_bintree_t{}},
	"8_experiment_runs_reconcile_metrics.down.sql": &_bintree_t{_8_experiment_runs_reconcile_metrics_down_sql, map[string]*_bintree_t{}},
	"8_experiment_runs_reconcile_metrics.up.sql":   &_bintree_t{_8_experiment_runs_reconcile_metrics_up_sql, map[string]*_bintree_t{}},
	"9_experiments_name.down.sql":                  &_bintree_t{_9_experiments_name_down_sql, map[string]*_bintree_t{}},
	"9_experiments_name.up.sql":                    &_bintree_t{_9_experiments_name_up_sql, map[string]*_bintree_t{}},
}}
